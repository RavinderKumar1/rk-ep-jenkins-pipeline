import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.gradle.api.tasks.testing.logging.TestLogEvent

/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Groovy library project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.4.2/userguide/building_java_projects.html
 */

plugins {
    // Apply the groovy Plugin to add support for Groovy.
    id 'groovy'

    // Apply the java-library plugin for API and implementation separation.
    id 'java-library'
}

sourceSets {
    main {
        groovy {
            srcDirs = ['vars']
        }
        resources {
            srcDirs = ['resources']
        }
    }
    test {
        groovy {
            srcDirs = ['test']
        }
    }
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
    maven {
        url "https://repo.jenkins-ci.org/releases/"
    }
    maven {
        url 'https://repo.jenkins-ci.org/public/'
    }
    mavenLocal()
}

dependencies {
    // Use the latest Groovy version for building this library
    implementation 'org.codehaus.groovy:groovy-all:3.0.17'

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation 'com.google.guava:guava:31.1-jre'

    // Use the awesome Spock testing and specification framework even with Java
    // testimplementation 'com.homeaway.devtools.jenkins:jenkins-spock:2.1.5'
    //testImplementation 'org.spockframework:spock-core:2.1-M1-groovy-3.0'
    testImplementation 'junit:junit:4.13.2'

    //Use Jenkins Pipeline Unit for testing
    testImplementation 'com.lesfurets:jenkins-pipeline-unit:1.17'

    // This dependency is exported to consumers, that is to say found on their compile classpath.
    api 'org.apache.commons:commons-math3:3.6.1'

    // https://mvnrepository.com/artifact/org.jenkins-ci.main/jenkins-core
    implementation 'org.jenkins-ci.main:jenkins-core:2.406'

    // https://mvnrepository.com/artifact/org.jenkins-ci.plugins/credentials-binding
    implementation 'org.jenkins-ci.plugins:credentials-binding:523.525.vb_72269281873'

    // https://mvnrepository.com/artifact/org.jenkins-ci.plugins/artifactory
    implementation group: 'org.jenkins-ci.plugins', name: 'artifactory', version: '3.18.3', ext: 'jar'

    // https://mvnrepository.com/artifact/com.google.inject/guice
    implementation('com.google.inject:guice'){
        version {
            strictly("4.2.3")
        }
    }
    // https://mvnrepository.com/artifact/com.cloudbees/groovy-cps
    implementation group: 'com.cloudbees', name: 'groovy-cps', version: '3659.v582dc37621d8', ext: 'jar'

    // https://mvnrepository.com/artifact/org.jsoup/jsoup
    implementation group: 'org.jsoup', name: 'jsoup', version: '1.16.1'

    // https://mvnrepository.com/artifact/org.jenkins-ci.plugins.workflow/workflow-api
    implementation group: 'org.jenkins-ci.plugins.workflow', name: 'workflow-api', version: '1213.v646def1087f9', ext: 'jar'

    // https://mvnrepository.com/artifact/org.jenkins-ci.plugins.workflow/workflow-job
    implementation group: 'org.jenkins-ci.plugins.workflow', name: 'workflow-job', version: '1289.vd1c337fd5354', ext: 'jar'

    // https://mvnrepository.com/artifact/org.jenkins-ci.plugins.workflow/workflow-step-api
    implementation group: 'org.jenkins-ci.plugins.workflow', name: 'workflow-step-api', version: '615.vb09dac339255', ext: 'jar'
    
    // https://mvnrepository.com/artifact/org.jenkins-ci.plugins.workflow/workflow-support
    implementation group: 'org.jenkins-ci.plugins.workflow', name: 'workflow-support', version: '839.v35e2736cfd5c', ext: 'jar'

    // https://mvnrepository.com/artifact/org.jenkins-ci.plugins.workflow/workflow-cps
    implementation group: 'org.jenkins-ci.plugins.workflow', name: 'workflow-cps', version: '3659.v582dc37621d8', ext: 'jar'

    // https://mvnrepository.com/artifact/org.jenkins-ci.plugins/git
    implementation group: 'org.jenkins-ci.plugins', name: 'git', version: '5.0.2', ext: 'jar'

    // https://mvnrepository.com/artifact/org.jenkins-ci.plugins/matrix-auth
    implementation group: 'org.jenkins-ci.plugins', name: 'matrix-auth', version: '3.1.7', ext: 'jar'

    // https://mvnrepository.com/artifact/org.jenkins-ci.plugins.workflow/workflow-scm-step
    implementation group: 'org.jenkins-ci.plugins.workflow', name: 'workflow-scm-step', version: '2.13', ext: 'jar'

}
tasks.register('cleanSharedLibraries', Delete) {
    delete "$buildDir/classes/groovy/test/vars"
}

tasks.register('prepareSharedLibraries', Copy) {
    dependsOn tasks.cleanSharedLibraries
    from 'vars'
    include '*'
    into "$buildDir/classes/groovy/test/vars"
}


test {
    //dependsOn tasks.prepareSharedLibraries
    //useJUnitPlatform()
    //afterTest { desc, result ->
    //    logger.quiet "Executing test ${desc.className}.${desc.name} [${desc.className}] with result: ${result.resultType}"
    //}
    testLogging {
        // set options for log level LIFECYCLE
        events TestLogEvent.FAILED,
                TestLogEvent.PASSED,
                TestLogEvent.SKIPPED,
                TestLogEvent.STANDARD_OUT
        exceptionFormat TestExceptionFormat.FULL
        showExceptions true
        showCauses true
        showStackTraces true

        // set options for log level DEBUG and INFO
        debug {
            events TestLogEvent.STARTED,
                    TestLogEvent.FAILED,
                    TestLogEvent.PASSED,
                    TestLogEvent.SKIPPED,
                    TestLogEvent.STANDARD_ERROR,
                    TestLogEvent.STANDARD_OUT
            exceptionFormat TestExceptionFormat.FULL
        }
        info.events = debug.events
        info.exceptionFormat = debug.exceptionFormat

        afterSuite { desc, result ->
            if (!desc.parent) { // will match the outermost suite
                def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
                def startItem = '|  ', endItem = '  |'
                def repeatLength = startItem.length() + output.length() + endItem.length()
                println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
            }
        }
    }
}
